The "7-base_geometry" Module
============================

Using "base_geometry" Module
----------------------------

import Module:
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

    proceed:

    >>> bg = BaseGeometry()
    >>> type(bg)
    <class '7-base_geometry.BaseGeometry'>

Regular Testing:
    >>> bg.integer_validator("Sam", 4)

Name and None:
    >>> bg.integer_validator('Sam', None)
    Traceback (most recent call last):
    ...
    TypeError: Sam must be a integer

 Name and negative:
    >>> bg.integer_validator("Sam", -1)
    Traceback (most recent call last):
    ...
    ValueError: Sam must be greater than 0

Name and inf:
    >>> bg.integer_validator('Mark', float('inf'))
    Traceback (most recent call last):
    ...
    TypeError: Mark must be a integer

Name alone:
    >>> bg.integer_validator('MarkSam')
    Traceback (most recent call last):
    ...
    TypeError: integer_validator() missing 1 required positional argument: 'value'

Name and str:
    >>> bg.integer_validator('Mark', 'Sam')
    Traceback (most recent call last):
    ...
    TypeError: Mark must be a integer

Two lists:
    >>> bg.integer_validator([1, 2], [3, 4])
    Traceback (most recent call last):
    ...
    TypeError: [1, 2] must be a integer

Testing area:
    >>> bg.area()
    Traceback (most recent call last):
    ...
    Exception: area() is not implemented

Emmpty parameters:
    >>> bg.integer_validator()
    Traceback (most recent call last):
    ...
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

Name and 0:
    >>> bg.integer_validator("Sam", 0)
    Traceback (most recent call last):
    ...
    ValueError: Sam must be greater than 0

Name and Tuple:
    >>> bg.integer_validator("Sam", (1, 2))
    Traceback (most recent call last):
    ...
    TypeError: Sam must be a integer

Name and list:
    >>> bg.integer_validator("Sam", [1, 2])
    Traceback (most recent call last):
    ...
    TypeError: Sam must be a integer

Name and False:
    >>> bg.integer_validator("Sam", False)
    Traceback (most recent call last):
    ...
    TypeError: Sam must be a integer

Flipped Parameters:
    >>> bg.integer_validator(5, "Guys")
    Traceback (most recent call last):
    ...
    TypeError: 5 must be a integer

List and 0:
    >>> bg.integer_validator([1, 2], 0)
    Traceback (most recent call last):
    ...
    ValueError: [1, 2] must be greater than 0

Name and curly brackets:
    >>> bg.integer_validator("Sam", {1, 2})
    Traceback (most recent call last):
    ...
    TypeError: Sam must be a integer
